// Package scheduler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package scheduler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get availability for multiple users (batch)
	// (GET /v1/availability/)
	GetBatchAvailability(c *gin.Context)
	// Create a new class
	// (POST /v1/class/)
	CreateClass(c *gin.Context)
	// List classes for a course
	// (GET /v1/class/course/{course_id}/)
	ListCourseClasses(c *gin.Context, courseId string)
	// List classes for a user
	// (GET /v1/class/user/{user_id}/)
	ListUserClasses(c *gin.Context, userId string)
	// Get all courses
	// (GET /v1/course/)
	ListCourses(c *gin.Context)
	// Create a new course
	// (POST /v1/course/)
	CreateCourse(c *gin.Context)
	// Get a course by ID
	// (GET /v1/course/{course_id}/)
	GetCourse(c *gin.Context, courseId string)
	// Update a course
	// (POST /v1/course/{course_id}/)
	UpdateCourse(c *gin.Context, courseId string)
	// Delete an organization
	// (DELETE /v1/org/{org_id}/)
	DeleteOrg(c *gin.Context, orgId string)
	// Create a new organization
	// (POST /v1/org/{org_id}/)
	CreateOrg(c *gin.Context, orgId string)
	// Get trackers for a course
	// (GET /v1/trackers/course/)
	GetTrackers(c *gin.Context)
	// Get all users
	// (GET /v1/user/)
	ListUsers(c *gin.Context)
	// Delete a user
	// (DELETE /v1/user/{user_id}/)
	DeleteUser(c *gin.Context, userId string)
	// Get a user by ID
	// (GET /v1/user/{user_id}/)
	GetUser(c *gin.Context, userId string)
	// Update a user
	// (PATCH /v1/user/{user_id}/)
	UpdateUser(c *gin.Context, userId string)
	// Create a new user
	// (POST /v1/user/{user_id}/)
	CreateUser(c *gin.Context, userId string)
	// Get availability for a user
	// (GET /v1/user/{user_id}/availability/)
	GetAvailability(c *gin.Context, userId string)
	// Update availability for a user
	// (PATCH /v1/user/{user_id}/availability/)
	UpdateAvailability(c *gin.Context, userId string)
	// Create availability for a user
	// (POST /v1/user/{user_id}/availability/)
	CreateAvailability(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBatchAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetBatchAvailability(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBatchAvailability(c)
}

// CreateClass operation middleware
func (siw *ServerInterfaceWrapper) CreateClass(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateClass(c)
}

// ListCourseClasses operation middleware
func (siw *ServerInterfaceWrapper) ListCourseClasses(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourseClasses(c, courseId)
}

// ListUserClasses operation middleware
func (siw *ServerInterfaceWrapper) ListUserClasses(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUserClasses(c, userId)
}

// ListCourses operation middleware
func (siw *ServerInterfaceWrapper) ListCourses(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourses(c)
}

// CreateCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateCourse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCourse(c)
}

// GetCourse operation middleware
func (siw *ServerInterfaceWrapper) GetCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCourse(c, courseId)
}

// UpdateCourse operation middleware
func (siw *ServerInterfaceWrapper) UpdateCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCourse(c, courseId)
}

// DeleteOrg operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrg(c, orgId)
}

// CreateOrg operation middleware
func (siw *ServerInterfaceWrapper) CreateOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrg(c, orgId)
}

// GetTrackers operation middleware
func (siw *ServerInterfaceWrapper) GetTrackers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrackers(c)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c, userId)
}

// GetAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAvailability(c, userId)
}

// UpdateAvailability operation middleware
func (siw *ServerInterfaceWrapper) UpdateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAvailability(c, userId)
}

// CreateAvailability operation middleware
func (siw *ServerInterfaceWrapper) CreateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAvailability(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/availability/", wrapper.GetBatchAvailability)
	router.POST(options.BaseURL+"/v1/class/", wrapper.CreateClass)
	router.GET(options.BaseURL+"/v1/class/course/:course_id/", wrapper.ListCourseClasses)
	router.GET(options.BaseURL+"/v1/class/user/:user_id/", wrapper.ListUserClasses)
	router.GET(options.BaseURL+"/v1/course/", wrapper.ListCourses)
	router.POST(options.BaseURL+"/v1/course/", wrapper.CreateCourse)
	router.GET(options.BaseURL+"/v1/course/:course_id/", wrapper.GetCourse)
	router.POST(options.BaseURL+"/v1/course/:course_id/", wrapper.UpdateCourse)
	router.DELETE(options.BaseURL+"/v1/org/:org_id/", wrapper.DeleteOrg)
	router.POST(options.BaseURL+"/v1/org/:org_id/", wrapper.CreateOrg)
	router.GET(options.BaseURL+"/v1/trackers/course/", wrapper.GetTrackers)
	router.GET(options.BaseURL+"/v1/user/", wrapper.ListUsers)
	router.DELETE(options.BaseURL+"/v1/user/:user_id/", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/v1/user/:user_id/", wrapper.GetUser)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/v1/user/:user_id/", wrapper.CreateUser)
	router.GET(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.GetAvailability)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.UpdateAvailability)
	router.POST(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.CreateAvailability)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/7V85R9BKwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
