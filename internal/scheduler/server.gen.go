// Package scheduler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package scheduler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get availability for multiple users (batch)
	// (GET /v1/availability/)
	GetBatchAvailability(c *gin.Context)
	// Create a new class
	// (POST /v1/class/)
	CreateClass(c *gin.Context)
	// List classes for a course
	// (GET /v1/class/course/{course_id}/)
	ListCourseClasses(c *gin.Context, courseId string)
	// List classes for a user
	// (GET /v1/class/user/{user_id}/)
	ListUserClasses(c *gin.Context, userId string)
	// Get all courses
	// (GET /v1/course/)
	ListCourses(c *gin.Context)
	// Create a new course
	// (POST /v1/course/)
	CreateCourse(c *gin.Context)
	// Get a course by ID
	// (GET /v1/course/{course_id}/)
	GetCourse(c *gin.Context, courseId string)
	// Update a course
	// (POST /v1/course/{course_id}/)
	UpdateCourse(c *gin.Context, courseId string)
	// Delete an organization
	// (DELETE /v1/org/{org_id}/)
	DeleteOrg(c *gin.Context, orgId string)
	// Create a new organization
	// (POST /v1/org/{org_id}/)
	CreateOrg(c *gin.Context, orgId string)
	// Get trackers for a course
	// (GET /v1/trackers/course/)
	GetTrackers(c *gin.Context)
	// Get all users
	// (GET /v1/user/)
	ListUsers(c *gin.Context)
	// Delete a user
	// (DELETE /v1/user/{user_id}/)
	DeleteUser(c *gin.Context, userId string)
	// Get a user by ID
	// (GET /v1/user/{user_id}/)
	GetUser(c *gin.Context, userId string)
	// Update a user
	// (PATCH /v1/user/{user_id}/)
	UpdateUser(c *gin.Context, userId string)
	// Create a new user
	// (POST /v1/user/{user_id}/)
	CreateUser(c *gin.Context, userId string)
	// Get availability for a user
	// (GET /v1/user/{user_id}/availability/)
	GetAvailability(c *gin.Context, userId string)
	// Update availability for a user
	// (PATCH /v1/user/{user_id}/availability/)
	UpdateAvailability(c *gin.Context, userId string)
	// Create availability for a user
	// (POST /v1/user/{user_id}/availability/)
	CreateAvailability(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBatchAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetBatchAvailability(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBatchAvailability(c)
}

// CreateClass operation middleware
func (siw *ServerInterfaceWrapper) CreateClass(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateClass(c)
}

// ListCourseClasses operation middleware
func (siw *ServerInterfaceWrapper) ListCourseClasses(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourseClasses(c, courseId)
}

// ListUserClasses operation middleware
func (siw *ServerInterfaceWrapper) ListUserClasses(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUserClasses(c, userId)
}

// ListCourses operation middleware
func (siw *ServerInterfaceWrapper) ListCourses(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourses(c)
}

// CreateCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateCourse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCourse(c)
}

// GetCourse operation middleware
func (siw *ServerInterfaceWrapper) GetCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCourse(c, courseId)
}

// UpdateCourse operation middleware
func (siw *ServerInterfaceWrapper) UpdateCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCourse(c, courseId)
}

// DeleteOrg operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrg(c, orgId)
}

// CreateOrg operation middleware
func (siw *ServerInterfaceWrapper) CreateOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrg(c, orgId)
}

// GetTrackers operation middleware
func (siw *ServerInterfaceWrapper) GetTrackers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrackers(c)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c, userId)
}

// GetAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAvailability(c, userId)
}

// UpdateAvailability operation middleware
func (siw *ServerInterfaceWrapper) UpdateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAvailability(c, userId)
}

// CreateAvailability operation middleware
func (siw *ServerInterfaceWrapper) CreateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAvailability(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/availability/", wrapper.GetBatchAvailability)
	router.POST(options.BaseURL+"/v1/class/", wrapper.CreateClass)
	router.GET(options.BaseURL+"/v1/class/course/:course_id/", wrapper.ListCourseClasses)
	router.GET(options.BaseURL+"/v1/class/user/:user_id/", wrapper.ListUserClasses)
	router.GET(options.BaseURL+"/v1/course/", wrapper.ListCourses)
	router.POST(options.BaseURL+"/v1/course/", wrapper.CreateCourse)
	router.GET(options.BaseURL+"/v1/course/:course_id/", wrapper.GetCourse)
	router.POST(options.BaseURL+"/v1/course/:course_id/", wrapper.UpdateCourse)
	router.DELETE(options.BaseURL+"/v1/org/:org_id/", wrapper.DeleteOrg)
	router.POST(options.BaseURL+"/v1/org/:org_id/", wrapper.CreateOrg)
	router.GET(options.BaseURL+"/v1/trackers/course/", wrapper.GetTrackers)
	router.GET(options.BaseURL+"/v1/user/", wrapper.ListUsers)
	router.DELETE(options.BaseURL+"/v1/user/:user_id/", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/v1/user/:user_id/", wrapper.GetUser)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/v1/user/:user_id/", wrapper.CreateUser)
	router.GET(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.GetAvailability)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.UpdateAvailability)
	router.POST(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.CreateAvailability)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RaS4/bthb+KwTvXdwLKGPnsSi8m2SAwECBBE2yCgYDjnRsM5FIhaScugP/94IPyaRE",
	"WbJjuU27G4vS4Tnf950HiXnCKS9KzoApiRdPWKYbKIj583ZLaE4eaU7VTv8uBS9BKApmldjVHB4ULeCB",
	"MgViS3KzRhUU5o//CljhBf7P7LDJzO0w+0gLWLqv8D7BalcCXmAiBNnp35UE8UAzbcYtSSUoW+P9PsEC",
	"vlVUQIYXn5sXk36f7hvz/PELpErb98N7syFsbeNqRZllFwtIQMG3cCFz+4GIPpUZUdANKD1EemzzGDjn",
	"cVJvGKPgNVHpxt/qN/hWgVRdt529UF0tFyIQRVyKe/ImJzJCf6ofxwNOcMorIaFvNasEUZQzvZiBTAUt",
	"7U9851YQZaigrFIgceOS1uwahLYgFRHKKFnbWHFREIUXWPP6zDxNurtKVWV1Ko/FKcEKSLoB8SPoNkgF",
	"fnsweL55G0a5MLhGyLB4B2CeTItbZcSi2lkHlj0QNR7wlQYBWLrzrHkc1iVIrwKrCg3Vd4Cv+Q4nuOBM",
	"bcxfj/SZe3ofJVUDeopXZ8qgUvzHRNBAHwIdcm938cJqUPfw8pHtF8l7IhRNaUmYGl3CB2GI1OlhGHoc",
	"/ChI+hWE7C1sx9Tai24/IL1l/18n+2PdrVc8rVp4no2YGt6JNWH0j6YjhOz00sK9z0ZppP1BYm3HBBPM",
	"F77Yx2FdkN+X9osXCS4oO/xo55PLgZgoizIHBVm3R97qjxFfIdNX0PJOF4zxKXy8B5QgKM8egGXjw3Xf",
	"GE2O/+pATSxLtJSyKp8gfqmIqqSffasqX9Fc7+Xvm+CK+b/kV1qWkEXTUWkaKVuP0qH/chL0hQDIgAvP",
	"QujjQSdNZDFBf5Jxkem9T+yEUBCaBzTbJ7FKSIVU/YU1J8dWuVj3inTDGTywqni0UXW1xXPwGb7NCqrH",
	"rA+2COIEf9SdNsrlGXO8czUI2A/POdRHTF9juhbSE8LZrfd70wJXPJLX75doxQUqCCNrytbItSxEWIbM",
	"ZISc8rXpBCuqtFv4g0sHgW7fL3GCtyCktfj8Zn4zN1oqgZGS4gV+eTO/ealzi6iNAXm2fT4j3jFrph+u",
	"wRQyTYZpF8sML/BbUJ1DmUtMkOo1z3Y2p5jSmOjpqixzmhoDsy/SNjfbIocaaO/hbx+KUIkKzANZcuYy",
	"+cV8fpIfow7cQczdGU+f6QIuTQDIxxVlRBEjCFkVBRE7i2j4jqG/yhUtc0A6vyT636M29X/NN1lLoz7f",
	"l3ttUXNomoEhr+Qywt4bAUSBPctOQ5q1PYqh5131m69RarzMkKzSFKRcVXlu8H5lSW2DnCHRCMMH1gaL",
	"CGLw3bZJDz/rZws42wpmT0072vcnwq9UKjviGVPmiF4SQQpQZjj8/ISp9k/nWD1lLYJGF+KTeAC368f9",
	"NdTtmBuWtY3aIurG2QPoGpZ6ySiZIBvzEPZa6LMn104GcNf94hTUD03qZ8VcRzwecR3vEbytykco2xaJ",
	"yUGw+hiBgglVz7zOu0ghzfNm1QPA7nCv2/yxulgLdZLC6KI8tzK6pJuiNHbys4YrFMyosvgWVAPj37Uc",
	"jqUpykAGitBcWtBf9RLFuEIrXrEsJlIHOXrcoeXdKTq1Q/J1AJ4qBdygP36Ii+JbGSuxRDidE+tRtFO1",
	"MoGL9ezJHnRsDmSgz51dou7M83diPYql5uj0IzkQidu/VELW1ZGIBV/24WaDRIQh/1bJgy+41BqqvlOD",
	"dXk9B+GdW9gDpKco7+O4cQJX7jp6cEh4C6q+up60Ybbvx/+qs199Rzl+Pq6hjDSAeqlvQK43a2gxw/Hg",
	"SHydcc3cop0wrJkTbM+oVjmv68CN7TDq8EhwvN5+snPvtQ4Ekbpp5vSTKq35YqjCtid6h1PSm5tXRuJy",
	"85dVV88BaGj2Ooqlnbx0vJ25q4GzJCrd9I1d02N6+SLq3ayeO3AZUE8at47S0AxbfZI+NiP8rBScPR3Y",
	"c/8EU0Ec/XjhHX0z3LoU/vmqT3jD21OFSOsa+MxS1L7y7WRE64p3oDpdD/vLp0jk/9LOrVa+qQmq1hmk",
	"HSln/xTOzi5vAVsXLnOnUmWsgNjW8LemWZ6SHGWwhZyXBTCF7Ls4wZXI8QJvlCoXs1mu39twqRa/zOdz",
	"vL/f/xkAAP//KWgvA0ErAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
