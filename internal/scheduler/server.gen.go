// Package scheduler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package scheduler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get availability for multiple users (batch)
	// (GET /v1/availability)
	GetBatchAvailability(c *gin.Context)
	// Create a new class
	// (POST /v1/class)
	CreateClass(c *gin.Context)
	// List classes for a course
	// (GET /v1/class/course)
	ListCourseClasses(c *gin.Context)
	// List classes for a user
	// (GET /v1/class/user)
	ListUserClasses(c *gin.Context)
	// Get all courses
	// (GET /v1/course)
	ListCourses(c *gin.Context)
	// Create a new course
	// (POST /v1/course)
	CreateCourse(c *gin.Context)
	// Get a course by ID
	// (GET /v1/course/{course_id})
	GetCourse(c *gin.Context, courseId string)
	// Update a course
	// (POST /v1/course/{course_id})
	UpdateCourse(c *gin.Context, courseId string)
	// Delete an organization
	// (DELETE /v1/org/{org_id})
	DeleteOrg(c *gin.Context, orgId string)
	// Create a new organization
	// (POST /v1/org/{org_id})
	CreateOrg(c *gin.Context, orgId string)
	// Get trackers for a course
	// (GET /v1/trackers/course)
	GetTrackers(c *gin.Context)
	// Get all users
	// (GET /v1/user)
	ListUsers(c *gin.Context)
	// Delete a user
	// (DELETE /v1/user/{user_id})
	DeleteUser(c *gin.Context, userId string)
	// Get a user by ID
	// (GET /v1/user/{user_id})
	GetUser(c *gin.Context, userId string)
	// Update a user
	// (PATCH /v1/user/{user_id})
	UpdateUser(c *gin.Context, userId string)
	// Create a new user
	// (POST /v1/user/{user_id})
	CreateUser(c *gin.Context, userId string)
	// Get availability for a user
	// (GET /v1/user/{user_id}/availability)
	GetAvailability(c *gin.Context, userId string)
	// Update availability for a user
	// (PATCH /v1/user/{user_id}/availability)
	UpdateAvailability(c *gin.Context, userId string)
	// Create availability for a user
	// (POST /v1/user/{user_id}/availability)
	CreateAvailability(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBatchAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetBatchAvailability(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBatchAvailability(c)
}

// CreateClass operation middleware
func (siw *ServerInterfaceWrapper) CreateClass(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateClass(c)
}

// ListCourseClasses operation middleware
func (siw *ServerInterfaceWrapper) ListCourseClasses(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourseClasses(c)
}

// ListUserClasses operation middleware
func (siw *ServerInterfaceWrapper) ListUserClasses(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUserClasses(c)
}

// ListCourses operation middleware
func (siw *ServerInterfaceWrapper) ListCourses(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourses(c)
}

// CreateCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateCourse(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCourse(c)
}

// GetCourse operation middleware
func (siw *ServerInterfaceWrapper) GetCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCourse(c, courseId)
}

// UpdateCourse operation middleware
func (siw *ServerInterfaceWrapper) UpdateCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCourse(c, courseId)
}

// DeleteOrg operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrg(c, orgId)
}

// CreateOrg operation middleware
func (siw *ServerInterfaceWrapper) CreateOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrg(c, orgId)
}

// GetTrackers operation middleware
func (siw *ServerInterfaceWrapper) GetTrackers(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrackers(c)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c, userId)
}

// GetAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAvailability(c, userId)
}

// UpdateAvailability operation middleware
func (siw *ServerInterfaceWrapper) UpdateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAvailability(c, userId)
}

// CreateAvailability operation middleware
func (siw *ServerInterfaceWrapper) CreateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAvailability(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}
	
// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/availability", wrapper.GetBatchAvailability)
	router.POST(options.BaseURL+"/v1/class", wrapper.CreateClass)
	router.GET(options.BaseURL+"/v1/class/course", wrapper.ListCourseClasses)
	router.GET(options.BaseURL+"/v1/class/user", wrapper.ListUserClasses)
	router.GET(options.BaseURL+"/v1/course", wrapper.ListCourses)
	router.POST(options.BaseURL+"/v1/course", wrapper.CreateCourse)
	router.GET(options.BaseURL+"/v1/course/:course_id", wrapper.GetCourse)
	router.POST(options.BaseURL+"/v1/course/:course_id", wrapper.UpdateCourse)
	router.DELETE(options.BaseURL+"/v1/org/:org_id", wrapper.DeleteOrg)
	router.POST(options.BaseURL+"/v1/org/:org_id", wrapper.CreateOrg)
	router.GET(options.BaseURL+"/v1/trackers/course", wrapper.GetTrackers)
	router.GET(options.BaseURL+"/v1/user", wrapper.ListUsers)
	router.DELETE(options.BaseURL+"/v1/user/:user_id", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/v1/user/:user_id", wrapper.GetUser)
	router.PATCH(options.BaseURL+"/v1/user/:user_id", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/v1/user/:user_id", wrapper.CreateUser)
	router.GET(options.BaseURL+"/v1/user/:user_id/availability", wrapper.GetAvailability)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/availability", wrapper.UpdateAvailability)
	router.POST(options.BaseURL+"/v1/user/:user_id/availability", wrapper.CreateAvailability)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
