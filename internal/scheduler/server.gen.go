// Package scheduler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package scheduler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get availability for multiple users (batch)
	// (GET /v1/availability/)
	GetBatchAvailability(c *gin.Context)
	// Create a new class
	// (POST /v1/class/)
	CreateClass(c *gin.Context)
	// List classes for a course
	// (GET /v1/class/course/{course_id}/)
	ListCourseClasses(c *gin.Context, courseId string)
	// List classes for a user
	// (GET /v1/class/user/{user_id}/)
	ListUserClasses(c *gin.Context, userId string)
	// Get all courses
	// (GET /v1/course/)
	ListCourses(c *gin.Context)
	// Create a new course
	// (POST /v1/course/)
	CreateCourse(c *gin.Context)
	// Get a course by ID
	// (GET /v1/course/{course_id}/)
	GetCourse(c *gin.Context, courseId string)
	// Update a course
	// (POST /v1/course/{course_id}/)
	UpdateCourse(c *gin.Context, courseId string)
	// Delete an organization
	// (DELETE /v1/org/{org_id}/)
	DeleteOrg(c *gin.Context, orgId string)
	// Create a new organization
	// (POST /v1/org/{org_id}/)
	CreateOrg(c *gin.Context, orgId string)
	// Get trackers for a course
	// (GET /v1/trackers/course/)
	GetTrackers(c *gin.Context)
	// Get all users
	// (GET /v1/user/)
	ListUsers(c *gin.Context)
	// Delete a user
	// (DELETE /v1/user/{user_id}/)
	DeleteUser(c *gin.Context, userId string)
	// Get a user by ID
	// (GET /v1/user/{user_id}/)
	GetUser(c *gin.Context, userId string)
	// Update a user
	// (PATCH /v1/user/{user_id}/)
	UpdateUser(c *gin.Context, userId string)
	// Create a new user
	// (POST /v1/user/{user_id}/)
	CreateUser(c *gin.Context, userId string)
	// Get availability for a user
	// (GET /v1/user/{user_id}/availability/)
	GetAvailability(c *gin.Context, userId string)
	// Update availability for a user
	// (PATCH /v1/user/{user_id}/availability/)
	UpdateAvailability(c *gin.Context, userId string)
	// Create availability for a user
	// (POST /v1/user/{user_id}/availability/)
	CreateAvailability(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBatchAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetBatchAvailability(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBatchAvailability(c)
}

// CreateClass operation middleware
func (siw *ServerInterfaceWrapper) CreateClass(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateClass(c)
}

// ListCourseClasses operation middleware
func (siw *ServerInterfaceWrapper) ListCourseClasses(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourseClasses(c, courseId)
}

// ListUserClasses operation middleware
func (siw *ServerInterfaceWrapper) ListUserClasses(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUserClasses(c, userId)
}

// ListCourses operation middleware
func (siw *ServerInterfaceWrapper) ListCourses(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourses(c)
}

// CreateCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateCourse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCourse(c)
}

// GetCourse operation middleware
func (siw *ServerInterfaceWrapper) GetCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCourse(c, courseId)
}

// UpdateCourse operation middleware
func (siw *ServerInterfaceWrapper) UpdateCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCourse(c, courseId)
}

// DeleteOrg operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrg(c, orgId)
}

// CreateOrg operation middleware
func (siw *ServerInterfaceWrapper) CreateOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrg(c, orgId)
}

// GetTrackers operation middleware
func (siw *ServerInterfaceWrapper) GetTrackers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrackers(c)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c, userId)
}

// GetAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAvailability(c, userId)
}

// UpdateAvailability operation middleware
func (siw *ServerInterfaceWrapper) UpdateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAvailability(c, userId)
}

// CreateAvailability operation middleware
func (siw *ServerInterfaceWrapper) CreateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAvailability(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/availability/", wrapper.GetBatchAvailability)
	router.POST(options.BaseURL+"/v1/class/", wrapper.CreateClass)
	router.GET(options.BaseURL+"/v1/class/course/:course_id/", wrapper.ListCourseClasses)
	router.GET(options.BaseURL+"/v1/class/user/:user_id/", wrapper.ListUserClasses)
	router.GET(options.BaseURL+"/v1/course/", wrapper.ListCourses)
	router.POST(options.BaseURL+"/v1/course/", wrapper.CreateCourse)
	router.GET(options.BaseURL+"/v1/course/:course_id/", wrapper.GetCourse)
	router.POST(options.BaseURL+"/v1/course/:course_id/", wrapper.UpdateCourse)
	router.DELETE(options.BaseURL+"/v1/org/:org_id/", wrapper.DeleteOrg)
	router.POST(options.BaseURL+"/v1/org/:org_id/", wrapper.CreateOrg)
	router.GET(options.BaseURL+"/v1/trackers/course/", wrapper.GetTrackers)
	router.GET(options.BaseURL+"/v1/user/", wrapper.ListUsers)
	router.DELETE(options.BaseURL+"/v1/user/:user_id/", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/v1/user/:user_id/", wrapper.GetUser)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/v1/user/:user_id/", wrapper.CreateUser)
	router.GET(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.GetAvailability)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.UpdateAvailability)
	router.POST(options.BaseURL+"/v1/user/:user_id/availability/", wrapper.CreateAvailability)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RaS4/bOBL+KwR3D7uA0nYeh4VvSRoIDCyQYCY5BY0GWyrbTCRSISlnPA3/9wEfkkmJ",
	"etixGsnMrS1Kxarv++pBoh9xyouSM2BK4tUjlukOCmL+fL0nNCcPNKfqoH+XgpcgFAWzSuxqDveKFnBP",
	"mQKxJ7lZowoK88e/BWzwCv9rcdpk4XZYfKQFrN1X+JhgdSgBrzARghz070qCuKeZNuOWpBKUbfHxmGAB",
	"3yoqIMOrz82LSb9Pd415/vAFUqXt++G93RG2tXG1osyyqwUkoOB7uJK540hEn8qMKOgGlJ4iHdo8Bs5l",
	"nNQbxih4Q1S687f6Db5VIFXXbWcvVFfLhQhEEZfinrzNiYzQn+rH8YATnPJKSOhbzSpBFOVML2YgU0FL",
	"+xPfuhVEGSooqxRI3LikNbsFoS1IRYQyStY2NlwUROEV1rw+M0+T7q5SVVmdylNxSrACku5A/Ai6DVKB",
	"3x4Mnm/ehlEuDK4RMizeAZhn0+JWGbGodtaBZfdETQd8o0EAlh48ax6HdQnSq8CqQkP1HeBrfsAJLjhT",
	"O/PXA33mnt5FSdWAnuPVhTKoFP8xETTQh0CH3NtdvLAa1D28fGT7RfKBCEVTWhKmJpfwURgidXochh4H",
	"PwqSfgUhewvbkFp70e0HpLfs/+NkP9TdesXTqoWX2Yip4b3YEkb/bDpCyE4vLdz7bJJG2h8k1nZMMMF8",
	"4Yt9GtYF+WNtv3iR4IKy0492PrkciImyKHNQkHV75Gv9MeIbZPoKWt/qgjE9hYd7QAmC8uweWDY9XPeN",
	"0eT0r07UxLJESymr8hnil4qoSvrZt6nyDc31Xv6+Ca6Y/0t+pWUJWTQdlaaRsu0kHfovJ0FfCIAMuPAs",
	"hD6edNJEFhP0JxkXmd77zE4IBaF5QLN9EquEVEjVX1hzMrTKxbZXpDvO4J5VxYONqqstnoPPMMkK6o1Z",
	"daeNcnnBHO9cDQL2w3MO9RHT15ieCukZ4ezW+6NpgRseyesPa7ThAhWEkS1lW+TMI8IyZDZATvnadIIV",
	"Vdot/LtLB4Fef1jjBO9BSGvx+c3yZmm0VAIjJcUr/PJmefNS5xZROwPyYv98Qbxj1kI/3IIpZJoM0y7W",
	"GV7hd6A6hzKXmCDVG54dbE4xpTHR01VZ5jQ1BhZfpG1utkWONdDew98xFKESFZgHsuTMZfKL5fIsP5rM",
	"/5nuMDp50hoq9SEyEI9BDPlEoowoYozJqiiIOFgKw3eM3qpc0TIHpD2S6D8P2tR/tcDIVmq5B4TfaYta",
	"NKb7GLWUXEbk8lYAUWAPz/OoxNqeJInn3XQzX6PUeJkhWaUpSLmp8tyw88qqqA1yhkSjRB9YGywiiMF3",
	"25c9/KyfLeBs71k8Nv3v2J95/6dS2ZnSmDJ3AiURpABlptHPj5hq/3RS12PdKuisIT6JB3Bbe3fXSqcJ",
	"zI3L2kZtEXXz8wl0DUu9ZJRMkI15DHst9MWjS8AR3HWDOgf1U1f8VTHXEU9HXMc7gLdV+QRl2yIxOwhW",
	"HxNQMKHqIdt5Fymked6segDYHe70XDFUF2uhzlIYXZSXVkaXdHOUxk5+1nCFgplUFt+BamD8WcvhVJqi",
	"DGSgCM2lBf1VL1GMK7ThFctiInWQo4cDWt+eo1M7lT8NwHOlgDtZTJ8ao/hWxkosEc7nxHoU7VStTOBi",
	"u3i0JyubAxnog26XqFvz/L3YTmKpOav9SA5E4vZvsZB1dSJiwZd9uNkgEWHIv8by4Atu0caq79xgXV/P",
	"QXiXFvYA6TnK+zRunMCVu/8eHRLegarvymdtmO0L+TkPm4MnR3cpOn0+rqGMNIB6qW9ArjdraDHD8ehI",
	"/DTjmrm2O2NYMyfYnlGtcl7XgRvbYdThkWC43n6yc+9THQgiddPM6WdVWvPFWIVtT/QOp6Q3N58YievN",
	"X1ZdPQegsdlrEEs7eel4O3NXA2dJVLrrG7vmx/T6RdS7yr104DKgnjVuDdLQDFt9kh6aEX5VCi6eDuy5",
	"f4apII5+vPBOvopu3UL/etUnCKCvCpHgpYtLUfvKt5MRrSveker0dNhfP0Ui/wh3abXyTc1QtS4gbaCc",
	"/V04u7i8BWxducydS5WxAmJfw9+aZnlKcpTBHnJeFsAUsu/iBFcixyu8U6pcLRa5fm/HpVr9b7lc4uPd",
	"8a8AAAD//5nt/UyyKwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
