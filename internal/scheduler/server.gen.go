// Package scheduler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package scheduler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get availability for multiple users (batch)
	// (GET /v1/availability)
	GetV1Availability(c *gin.Context)
	// Create a new class
	// (POST /v1/class)
	PostV1Class(c *gin.Context)
	// Get classes for a course
	// (GET /v1/class/course)
	GetV1ClassCourse(c *gin.Context)
	// Get classes for a user
	// (GET /v1/class/user)
	GetV1ClassUser(c *gin.Context)
	// Get all courses
	// (GET /v1/course)
	GetV1Course(c *gin.Context)
	// Create a new course
	// (POST /v1/course)
	PostV1Course(c *gin.Context)
	// Get a course by ID
	// (GET /v1/course/{course_id})
	GetV1CourseCourseId(c *gin.Context, courseId string)
	// Update a course
	// (POST /v1/course/{course_id})
	PostV1CourseCourseId(c *gin.Context, courseId string)
	// Delete an organization
	// (DELETE /v1/org/{org_id})
	DeleteV1OrgOrgId(c *gin.Context, orgId string)
	// Create a new organization
	// (POST /v1/org/{org_id})
	PostV1OrgOrgId(c *gin.Context, orgId string)
	// Get trackers for a course
	// (GET /v1/trackers/course)
	GetV1TrackersCourse(c *gin.Context)
	// Get all users
	// (GET /v1/user)
	GetV1User(c *gin.Context)
	// Delete a user
	// (DELETE /v1/user/{user_id})
	DeleteV1UserUserId(c *gin.Context, userId string)
	// Get a user by ID
	// (GET /v1/user/{user_id})
	GetV1UserUserId(c *gin.Context, userId string)
	// Update a user
	// (PATCH /v1/user/{user_id})
	PatchV1UserUserId(c *gin.Context, userId string)
	// Create a new user
	// (POST /v1/user/{user_id})
	PostV1UserUserId(c *gin.Context, userId string)
	// Get availability for a user
	// (GET /v1/user/{user_id}/availability)
	GetV1UserUserIdAvailability(c *gin.Context, userId string)
	// Update availability for a user
	// (PATCH /v1/user/{user_id}/availability)
	PatchV1UserUserIdAvailability(c *gin.Context, userId string)
	// Create availability for a user
	// (POST /v1/user/{user_id}/availability)
	PostV1UserUserIdAvailability(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1Availability operation middleware
func (siw *ServerInterfaceWrapper) GetV1Availability(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Availability(c)
}

// PostV1Class operation middleware
func (siw *ServerInterfaceWrapper) PostV1Class(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Class(c)
}

// GetV1ClassCourse operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClassCourse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClassCourse(c)
}

// GetV1ClassUser operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClassUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClassUser(c)
}

// GetV1Course operation middleware
func (siw *ServerInterfaceWrapper) GetV1Course(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Course(c)
}

// PostV1Course operation middleware
func (siw *ServerInterfaceWrapper) PostV1Course(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Course(c)
}

// GetV1CourseCourseId operation middleware
func (siw *ServerInterfaceWrapper) GetV1CourseCourseId(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1CourseCourseId(c, courseId)
}

// PostV1CourseCourseId operation middleware
func (siw *ServerInterfaceWrapper) PostV1CourseCourseId(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1CourseCourseId(c, courseId)
}

// DeleteV1OrgOrgId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1OrgOrgId(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteV1OrgOrgId(c, orgId)
}

// PostV1OrgOrgId operation middleware
func (siw *ServerInterfaceWrapper) PostV1OrgOrgId(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1OrgOrgId(c, orgId)
}

// GetV1TrackersCourse operation middleware
func (siw *ServerInterfaceWrapper) GetV1TrackersCourse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1TrackersCourse(c)
}

// GetV1User operation middleware
func (siw *ServerInterfaceWrapper) GetV1User(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1User(c)
}

// DeleteV1UserUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1UserUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteV1UserUserId(c, userId)
}

// GetV1UserUserId operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserUserId(c, userId)
}

// PatchV1UserUserId operation middleware
func (siw *ServerInterfaceWrapper) PatchV1UserUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchV1UserUserId(c, userId)
}

// PostV1UserUserId operation middleware
func (siw *ServerInterfaceWrapper) PostV1UserUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1UserUserId(c, userId)
}

// GetV1UserUserIdAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetV1UserUserIdAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1UserUserIdAvailability(c, userId)
}

// PatchV1UserUserIdAvailability operation middleware
func (siw *ServerInterfaceWrapper) PatchV1UserUserIdAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchV1UserUserIdAvailability(c, userId)
}

// PostV1UserUserIdAvailability operation middleware
func (siw *ServerInterfaceWrapper) PostV1UserUserIdAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1UserUserIdAvailability(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/availability", wrapper.GetV1Availability)
	router.POST(options.BaseURL+"/v1/class", wrapper.PostV1Class)
	router.GET(options.BaseURL+"/v1/class/course", wrapper.GetV1ClassCourse)
	router.GET(options.BaseURL+"/v1/class/user", wrapper.GetV1ClassUser)
	router.GET(options.BaseURL+"/v1/course", wrapper.GetV1Course)
	router.POST(options.BaseURL+"/v1/course", wrapper.PostV1Course)
	router.GET(options.BaseURL+"/v1/course/:course_id", wrapper.GetV1CourseCourseId)
	router.POST(options.BaseURL+"/v1/course/:course_id", wrapper.PostV1CourseCourseId)
	router.DELETE(options.BaseURL+"/v1/org/:org_id", wrapper.DeleteV1OrgOrgId)
	router.POST(options.BaseURL+"/v1/org/:org_id", wrapper.PostV1OrgOrgId)
	router.GET(options.BaseURL+"/v1/trackers/course", wrapper.GetV1TrackersCourse)
	router.GET(options.BaseURL+"/v1/user", wrapper.GetV1User)
	router.DELETE(options.BaseURL+"/v1/user/:user_id", wrapper.DeleteV1UserUserId)
	router.GET(options.BaseURL+"/v1/user/:user_id", wrapper.GetV1UserUserId)
	router.PATCH(options.BaseURL+"/v1/user/:user_id", wrapper.PatchV1UserUserId)
	router.POST(options.BaseURL+"/v1/user/:user_id", wrapper.PostV1UserUserId)
	router.GET(options.BaseURL+"/v1/user/:user_id/availability", wrapper.GetV1UserUserIdAvailability)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/availability", wrapper.PatchV1UserUserIdAvailability)
	router.POST(options.BaseURL+"/v1/user/:user_id/availability", wrapper.PostV1UserUserIdAvailability)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
