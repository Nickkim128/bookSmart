// Package scheduler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package scheduler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get availability for multiple users (batch)
	// (GET /v1/availability)
	GetBatchAvailability(c *gin.Context)
	// Create a new class
	// (POST /v1/class)
	CreateClass(c *gin.Context)
	// List classes for a course
	// (GET /v1/class/course/{course_id})
	ListCourseClasses(c *gin.Context, courseId string)
	// List classes for a user
	// (GET /v1/class/user/{user_id})
	ListUserClasses(c *gin.Context, userId string)
	// Get all courses
	// (GET /v1/course)
	ListCourses(c *gin.Context)
	// Create a new course
	// (POST /v1/course)
	CreateCourse(c *gin.Context)
	// Get a course by ID
	// (GET /v1/course/{course_id})
	GetCourse(c *gin.Context, courseId string)
	// Update a course
	// (POST /v1/course/{course_id})
	UpdateCourse(c *gin.Context, courseId string)
	// Delete an organization
	// (DELETE /v1/org/{org_id})
	DeleteOrg(c *gin.Context, orgId string)
	// Create a new organization
	// (POST /v1/org/{org_id})
	CreateOrg(c *gin.Context, orgId string)
	// Get trackers for a course
	// (GET /v1/trackers/course)
	GetTrackers(c *gin.Context)
	// Get all users
	// (GET /v1/user)
	ListUsers(c *gin.Context)
	// Delete a user
	// (DELETE /v1/user/{user_id})
	DeleteUser(c *gin.Context, userId string)
	// Get a user by ID
	// (GET /v1/user/{user_id})
	GetUser(c *gin.Context, userId string)
	// Update a user
	// (PATCH /v1/user/{user_id})
	UpdateUser(c *gin.Context, userId string)
	// Create a new user
	// (POST /v1/user/{user_id})
	CreateUser(c *gin.Context, userId string)
	// Get availability for a user
	// (GET /v1/user/{user_id}/availability)
	GetAvailability(c *gin.Context, userId string)
	// Update availability for a user
	// (PATCH /v1/user/{user_id}/availability)
	UpdateAvailability(c *gin.Context, userId string)
	// Create availability for a user
	// (POST /v1/user/{user_id}/availability)
	CreateAvailability(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBatchAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetBatchAvailability(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBatchAvailability(c)
}

// CreateClass operation middleware
func (siw *ServerInterfaceWrapper) CreateClass(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateClass(c)
}

// ListCourseClasses operation middleware
func (siw *ServerInterfaceWrapper) ListCourseClasses(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourseClasses(c, courseId)
}

// ListUserClasses operation middleware
func (siw *ServerInterfaceWrapper) ListUserClasses(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUserClasses(c, userId)
}

// ListCourses operation middleware
func (siw *ServerInterfaceWrapper) ListCourses(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCourses(c)
}

// CreateCourse operation middleware
func (siw *ServerInterfaceWrapper) CreateCourse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCourse(c)
}

// GetCourse operation middleware
func (siw *ServerInterfaceWrapper) GetCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCourse(c, courseId)
}

// UpdateCourse operation middleware
func (siw *ServerInterfaceWrapper) UpdateCourse(c *gin.Context) {

	var err error

	// ------------- Path parameter "course_id" -------------
	var courseId string

	err = runtime.BindStyledParameterWithOptions("simple", "course_id", c.Param("course_id"), &courseId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter course_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCourse(c, courseId)
}

// DeleteOrg operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrg(c, orgId)
}

// CreateOrg operation middleware
func (siw *ServerInterfaceWrapper) CreateOrg(c *gin.Context) {

	var err error

	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithOptions("simple", "org_id", c.Param("org_id"), &orgId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter org_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrg(c, orgId)
}

// GetTrackers operation middleware
func (siw *ServerInterfaceWrapper) GetTrackers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrackers(c)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, userId)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, userId)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c, userId)
}

// GetAvailability operation middleware
func (siw *ServerInterfaceWrapper) GetAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAvailability(c, userId)
}

// UpdateAvailability operation middleware
func (siw *ServerInterfaceWrapper) UpdateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAvailability(c, userId)
}

// CreateAvailability operation middleware
func (siw *ServerInterfaceWrapper) CreateAvailability(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAvailability(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/availability", wrapper.GetBatchAvailability)
	router.POST(options.BaseURL+"/v1/class", wrapper.CreateClass)
	router.GET(options.BaseURL+"/v1/class/course/:course_id", wrapper.ListCourseClasses)
	router.GET(options.BaseURL+"/v1/class/user/:user_id", wrapper.ListUserClasses)
	router.GET(options.BaseURL+"/v1/course", wrapper.ListCourses)
	router.POST(options.BaseURL+"/v1/course", wrapper.CreateCourse)
	router.GET(options.BaseURL+"/v1/course/:course_id", wrapper.GetCourse)
	router.POST(options.BaseURL+"/v1/course/:course_id", wrapper.UpdateCourse)
	router.DELETE(options.BaseURL+"/v1/org/:org_id", wrapper.DeleteOrg)
	router.POST(options.BaseURL+"/v1/org/:org_id", wrapper.CreateOrg)
	router.GET(options.BaseURL+"/v1/trackers/course", wrapper.GetTrackers)
	router.GET(options.BaseURL+"/v1/user", wrapper.ListUsers)
	router.DELETE(options.BaseURL+"/v1/user/:user_id", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/v1/user/:user_id", wrapper.GetUser)
	router.PATCH(options.BaseURL+"/v1/user/:user_id", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/v1/user/:user_id", wrapper.CreateUser)
	router.GET(options.BaseURL+"/v1/user/:user_id/availability", wrapper.GetAvailability)
	router.PATCH(options.BaseURL+"/v1/user/:user_id/availability", wrapper.UpdateAvailability)
	router.POST(options.BaseURL+"/v1/user/:user_id/availability", wrapper.CreateAvailability)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
